plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'androidx.navigation.safeargs.kotlin'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.4.10'
    id 'com.google.firebase.crashlytics'
}

android {
    compileSdkVersion 30
    defaultConfig {
        applicationId 'com.github.tatsuyafujisaki.androidplayground'
        minSdkVersion 26
        targetSdkVersion 30
        versionCode 1
        versionName '1.0'
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        /*
         * Instruct Android Test Orchestrator to remove all shared state
         * from a device's CPU and memory between tests.
         * https://developer.android.com/training/testing/junit-runner#ato-gradle
         * https://developer.android.com/training/testing/junit-runner#using-android-test-orchestrator
         */
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
        // allWarningsAsErrors = true
    }
    buildFeatures {
        viewBinding true
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true

            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                'proguard-rules.pro',
                'glide.pro', // https://bumptech.github.io/glide/doc/download-setup.html#proguard
                'kotlin-serialization.pro'
            // https://github.com/Kotlin/kotlinx.serialization#android

            buildConfigField 'String', 'BASE_URL', '"https://www.googleapis.com"'

            /*
             * Only for debugging purposes
             */
            // debuggable true
            // signingConfig signingConfigs.debug
        }
        debug {
            applicationIdSuffix ".debug"
            buildConfigField 'String', 'BASE_URL', '"https://www.googleapis.com"'
        }
    }
    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR' // Android Test Orchestrator

        unitTests {
            includeAndroidResources true // Robolectric
        }

        /*
         * Unless explicitly specified, the following default is used.
         * https://developer.android.com/reference/tools/gradle-api/com/android/build/api/dsl/LintOptions
         * https://developer.android.com/studio/write/lint#gradle
         */
        lintOptions {
            // Keep on building even if errors are found. Default is true.
            abortOnError false
        }
    }

    /*
     * for debugging purposes
     */

//    productFlavors.all { productFlavor ->
//        println 'productFlavor: ' + productFlavor.name
//    }
//
//    buildTypes.all { buildType ->
//        println 'buildType: ' + buildType.name
//    }
//
//    applicationVariants.all { applicationVariant ->
//        println 'buildVariant: ' + applicationVariant.name
//        println 'buildVariant (capitalized): ' + applicationVariant.name.capitalize()
//    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    /*
     * org.jetbrains
     */

    def coroutinesVersion = '1.4.2'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-play-services:$coroutinesVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"

    /*
     * androidx
     */

    implementation 'androidx.activity:activity-ktx:1.2.0'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.collection:collection-ktx:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.coordinatorlayout:coordinatorlayout:1.1.0'
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.preference:preference-ktx:1.1.1'
    implementation 'androidx.recyclerview:recyclerview-selection:1.1.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.viewpager2:viewpager2:1.0.0'

    def fragmentVersion = '1.3.0'
    implementation "androidx.fragment:fragment-ktx:$fragmentVersion"
    debugImplementation "androidx.fragment:fragment-testing:$fragmentVersion"

    // https://developer.android.com/jetpack/androidx/releases/lifecycle#declaring_dependencies
    def lifecycleVersion = '2.3.0'
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycleVersion"

    def roomVersion = '2.2.6'
    implementation "androidx.room:room-runtime:$roomVersion"
    implementation "androidx.room:room-ktx:$roomVersion"
    testImplementation "androidx.room:room-testing:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"

    // Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$navigationVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$navigationVersion"
    androidTestImplementation "androidx.navigation:navigation-testing:$navigationVersion"

    def pagingVersion = '2.1.2'
    implementation "androidx.paging:paging-runtime-ktx:$pagingVersion"
    testImplementation "androidx.paging:paging-common-ktx:$pagingVersion"

    /*
     * com.google.android
     */

    implementation 'com.google.android.material:material:1.3.0'
    implementation 'com.google.android.play:core-ktx:1.8.1'

    /*
     * com.google.firebase
     */

    implementation platform('com.google.firebase:firebase-bom:26.5.0')

    /*
     * com.google.maps.android
     */

    def mapsVersion = '2.2.0'
    implementation "com.google.maps.android:android-maps-utils:$mapsVersion"
    implementation "com.google.maps.android:maps-ktx:$mapsVersion"
    implementation "com.google.maps.android:maps-utils-ktx:$mapsVersion"
    implementation 'com.google.maps.android:places-ktx:0.4.0'

    // TODO Use Hilt when it goes out of beta.
    def daggerVersion = '2.32'
    implementation "com.google.dagger:dagger:$daggerVersion"
    implementation "com.google.dagger:dagger-android:$daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"

    /*
     * Third-party
     */

    def retrofitVersion = '2.9.0'
    implementation "com.squareup.retrofit2:converter-moshi:$retrofitVersion"

    def okHttpVersion = '4.9.1'
    implementation "com.squareup.okhttp3:okhttp-urlconnection:$okHttpVersion" // CookieJar
    implementation "com.squareup.okhttp3:logging-interceptor:$okHttpVersion"

    def moshiVersion = '1.11.0'
    implementation "com.squareup.moshi:moshi-kotlin:$moshiVersion"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshiVersion"

    def glideVersion = '4.12.0'
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    kapt "com.github.bumptech.glide:compiler:$glideVersion"

    def flipperVersion = '0.77.0'
    debugImplementation "com.facebook.flipper:flipper:$flipperVersion"
    debugImplementation "com.facebook.flipper:flipper-network-plugin:$flipperVersion"
    releaseImplementation "com.facebook.flipper:flipper-noop:$flipperVersion"
    debugImplementation 'com.facebook.soloader:soloader:0.10.1'

    // Stetho
    implementation 'com.facebook.stetho:stetho-okhttp3:1.5.1'

    // in case you are not authorized to use coroutines.
    implementation 'io.reactivex.rxjava3:rxjava:3.0.10'
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.0' // required for io.reactivex.rxjava3.android.schedulers.AndroidSchedulers

    /*
     * For both local unit tests and instrumented unit tests
     */

    def androidxTestVersion = '1.3.0'
    androidTestImplementation "androidx.test.ext:truth:$androidxTestVersion"
    androidTestImplementation "androidx.test:core-ktx:$androidxTestVersion"
    androidTestImplementation "androidx.test:rules:$androidxTestVersion"
    androidTestImplementation "androidx.test:runner:$androidxTestVersion"
    androidTestUtil "androidx.test:orchestrator:$androidxTestVersion"
    testImplementation "androidx.test.ext:truth:$androidxTestVersion"
    testImplementation "androidx.test:core-ktx:$androidxTestVersion" // Robolectric

    def truthVersion = '1.1.2'
    testImplementation "com.google.truth:truth:$truthVersion"
    androidTestImplementation "com.google.truth:truth:$truthVersion"

    // JUnit
    androidTestImplementation 'androidx.test.ext:junit-ktx:1.1.2'

    def mockkVersion = '1.10.6'
    testImplementation "io.mockk:mockk:$mockkVersion"
    androidTestImplementation "io.mockk:mockk-android:$mockkVersion"

    /*
     * For local unit tests
     * https://developer.android.com/training/testing/unit-testing/local-unit-tests#setup
     */

    testImplementation 'org.robolectric:robolectric:4.5.1'

    /*
     * For instrumented unit tests
     * https://developer.android.com/training/testing/unit-testing/instrumented-unit-tests#setup
     * https://developer.android.com/training/testing/set-up-project#gradle-dependencies
     */

    def espressoVersion = '3.3.0'
    androidTestImplementation "androidx.test.espresso:espresso-accessibility:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-idling-resource:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-web:$espressoVersion"
    androidTestImplementation "androidx.test.espresso.idling:idling-concurrent:$espressoVersion"
}

apply plugin: 'com.google.gms.google-services'
