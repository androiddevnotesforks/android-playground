plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'androidx.navigation.safeargs.kotlin'
    // https://plugins.gradle.org/plugin/org.jetbrains.kotlin.plugin.serialization
    id 'org.jetbrains.kotlin.plugin.serialization' version "$kotlinVersion"
    id 'dagger.hilt.android.plugin'
    id 'com.google.gms.google-services' // This must be above ...
    id 'com.google.firebase.crashlytics' // ... this file. Otherwise an error will occur.
}

android {
    compileSdk 31
    defaultConfig {
        applicationId 'com.github.tatsuyafujisaki.androidplayground'
        minSdk 24
        targetSdk 31
        versionCode 1
        versionName '1.0'
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true

            // https://bumptech.github.io/glide/doc/download-setup.html#proguard
            // https://github.com/Kotlin/kotlinx.serialization#android
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                'proguard-rules.pro',
                'glide.pro',
                'kotlin-serialization.pro'

            buildConfigField 'String', 'BASE_URL', '"https://www.googleapis.com"'

            /*
             * For debugging purposes
             */
            debuggable true
            signingConfig signingConfigs.debug
        }
        debug {
            applicationIdSuffix ".debug"
            buildConfigField 'String', 'BASE_URL', '"https://www.googleapis.com"'
        }
    }
    buildFeatures {
        compose true
        viewBinding true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.0.5'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        allWarningsAsErrors = true
        jvmTarget = '11'
        useIR = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    /*
     * > Dependency on the standard library added by default
     * https://kotlinlang.org/docs/whatsnew14.html#dependency-on-the-standard-library-added-by-default
     */

    /*
     * org.jetbrains
     */

    def coroutinesVersion = '1.5.2'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-play-services:$coroutinesVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"

    /*
     * androidx
     */

    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'
    implementation 'androidx.coordinatorlayout:coordinatorlayout:1.1.0'
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.preference:preference-ktx:1.1.1'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.viewpager2:viewpager2:1.0.0'

    def fragmentVersion = '1.4.0'
    implementation "androidx.fragment:fragment-ktx:$fragmentVersion"
    debugImplementation "androidx.fragment:fragment-testing:$fragmentVersion"

    def lifecycleVersion = '2.4.0'
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycleVersion"
    kapt "androidx.lifecycle:lifecycle-common-java8:$lifecycleVersion"

    def roomVersion = '2.4.0'
    implementation "androidx.room:room-ktx:$roomVersion"
    testImplementation "androidx.room:room-testing:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"

    // androidx.navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$navigationVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$navigationVersion"
    androidTestImplementation "androidx.navigation:navigation-testing:$navigationVersion"

    def pagingVersion = '3.1.0'
    implementation "androidx.paging:paging-runtime-ktx:$pagingVersion"
    testImplementation "androidx.paging:paging-common-ktx:$pagingVersion"

    def cameraXVersion = '1.0.2'
    implementation "androidx.camera:camera-camera2:${cameraXVersion}"
    implementation "androidx.camera:camera-lifecycle:${cameraXVersion}"
    implementation 'androidx.camera:camera-view:1.0.0-alpha32'
    implementation 'androidx.camera:camera-extensions:1.0.0-alpha32'

    /*
     * Jetpack Compose
     */

    // To use ComponentActivity.
    // includes "androidx.activity:activity-ktx".
    implementation 'androidx.activity:activity-compose:1.4.0'
    // Counterintuitively, it does not includes "androidx.compose.material:material".
    implementation 'androidx.compose.material:material-icons-extended:1.0.5'
    // Animations
    // includes androidx.compose.foundation:foundation-layout.
    implementation 'androidx.compose.animation:animation:1.0.5'
    // Tooling support (Previews, etc.).
    implementation 'androidx.compose.material:material:1.0.5'
    implementation 'androidx.compose.ui:ui-tooling:1.0.5'
    // To use LiveData.observeAsState()
    implementation 'androidx.compose.runtime:runtime-livedata:1.0.5'
    // To use Observable.subscribeAsState()
    implementation 'androidx.compose.runtime:runtime-rxjava3:1.0.5'
    // To use a MDC theme
    implementation 'com.google.android.material:compose-theme-adapter:1.1.1'
    // UI Tests
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4:1.0.5'

    /*
     * com.google.accompanist
     */

    def accompanistVersion = '0.20.3'
    implementation "com.google.accompanist:accompanist-flowlayout:$accompanistVersion"
    implementation "com.google.accompanist:accompanist-placeholder-material:$accompanistVersion"
    implementation "com.google.accompanist:accompanist-swiperefresh:$accompanistVersion"

    /*
     * com.google.android
     */

    implementation 'com.google.android.material:material:1.4.0'
    implementation 'com.google.android.play:core-ktx:1.8.1'

    /*
     * com.google.firebase
     */

    implementation platform('com.google.firebase:firebase-bom:29.0.1')

    /*
     * com.google.dagger
     */

    implementation "com.google.dagger:hilt-android:$hiltVersion"
    kapt "com.google.dagger:hilt-compiler:$hiltVersion"
    androidTestImplementation "com.google.dagger:hilt-android-testing:$hiltVersion"
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$hiltVersion"
    testImplementation "com.google.dagger:hilt-android-testing:$hiltVersion"
    kaptTest "com.google.dagger:hilt-compiler:$hiltVersion"

    /*
     * Third-party
     */

    def retrofitVersion = '2.9.0'
    implementation "com.squareup.retrofit2:converter-moshi:$retrofitVersion"

    def okHttpVersion = '4.9.1'
    implementation "com.squareup.okhttp3:logging-interceptor:$okHttpVersion"
    implementation "com.squareup.okhttp3:okhttp-urlconnection:$okHttpVersion" // CookieJar

    def glideVersion = '4.12.0'
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    kapt "com.github.bumptech.glide:compiler:$glideVersion"

    def flipperVersion = '0.125.0'
    debugImplementation "com.facebook.flipper:flipper:$flipperVersion"
    debugImplementation "com.facebook.flipper:flipper-network-plugin:$flipperVersion"
    releaseImplementation "com.facebook.flipper:flipper-noop:$flipperVersion"
    debugImplementation 'com.facebook.soloader:soloader:0.10.3'

    implementation "com.squareup.moshi:moshi-kotlin:1.13.0"

    // Migrate to coroutines if you have the decision right to do so.
    implementation 'io.reactivex.rxjava3:rxjava:3.1.3'
    // required for io.reactivex.rxjava3.android.schedulers.AndroidSchedulers
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.0'

    /*
     * For both local unit tests and instrumented unit tests
     */

    def androidxTestVersion = '1.4.1'
    androidTestImplementation "androidx.test.ext:truth:$androidxTestVersion"
    androidTestImplementation "androidx.test:core-ktx:$androidxTestVersion"
    androidTestImplementation "androidx.test:rules:$androidxTestVersion"
    androidTestImplementation "androidx.test:runner:$androidxTestVersion"
    androidTestImplementation 'androidx.test.ext:junit-ktx:1.1.3'
    testImplementation "androidx.test.ext:truth:$androidxTestVersion"
    testImplementation "androidx.test:core-ktx:$androidxTestVersion" // Robolectric

    def truthVersion = '1.1.3'
    testImplementation "com.google.truth:truth:$truthVersion"
    androidTestImplementation "com.google.truth:truth:$truthVersion"

    testImplementation 'org.mockito.kotlin:mockito-kotlin:4.0.0'

    /*
     * For local unit tests
     * https://developer.android.com/training/testing/unit-testing/local-unit-tests#setup
     */

    testImplementation 'org.robolectric:robolectric:4.7.3'

    /*
     * For instrumented unit tests
     * https://developer.android.com/training/testing/unit-testing/instrumented-unit-tests#setup
     * https://developer.android.com/training/testing/set-up-project#gradle-dependencies
     */

    def espressoVersion = '3.4.0'
    androidTestImplementation "androidx.test.espresso:espresso-accessibility:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-idling-resource:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-web:$espressoVersion"
    androidTestImplementation "androidx.test.espresso.idling:idling-concurrent:$espressoVersion"
}

kapt {
    correctErrorTypes true
}
